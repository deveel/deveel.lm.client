// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Link.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Route
    {
        /// <summary>
        /// Initializes a new instance of the Route class.
        /// </summary>
        public Route()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Route class.
        /// </summary>
        /// <param name="type">The type of route. Possible values include:
        /// 'KEYWORD_ROUTE', 'SUBNUMBER_ROUTE'</param>
        /// <param name="number">Either a shortCode or a longnumber formatted
        /// as a MSISDN</param>
        /// <param name="platformId">The Platorm ID provided by LINK
        /// Mobility</param>
        /// <param name="platformPartnerId">The ID of the Partner provided by
        /// LINK Mobility</param>
        /// <param name="id">The unique identifier of the route, generated when
        /// created</param>
        /// <param name="refId">Id supplied by the client</param>
        /// <param name="keyword">The keyword of the route (if the type is
        /// KEYWORD_ROUTE)</param>
        /// <param name="keywordType">Defines the type of keyword matching (if
        /// the route type is KEYWORD_ROUTE). Possible values include:
        /// 'DEFAULT', 'EQUALS', 'FIRST_WORD', 'STARTS_WITH'</param>
        /// <param name="active">Indicates is the route is active</param>
        /// <param name="start">The time when the route should start to be
        /// active</param>
        /// <param name="end">The time when the route should end to be
        /// active</param>
        /// <param name="platformServiceType">] The type of the platform
        /// service</param>
        /// <param name="platformServiceId">] The Id of the platform
        /// service</param>
        /// <param name="shared">Indicates if the keyword may be registered
        /// multiple times</param>
        /// <param name="notifyStop">Indicates that stop notifications should
        /// be forwarded for this keyword</param>
        /// <param name="customParameters"> Additional parameters may be
        /// specified if needed</param>
        public Route(string type, string number, string platformId, string platformPartnerId, string id = default(string), string refId = default(string), string keyword = default(string), string keywordType = default(string), bool? active = default(bool?), System.DateTime? start = default(System.DateTime?), System.DateTime? end = default(System.DateTime?), string platformServiceType = default(string), string platformServiceId = default(string), bool? shared = default(bool?), bool notifyStop = default(bool), object customParameters = default(object))
        {
            Id = id;
            RefId = refId;
            Type = type;
            Keyword = keyword;
            KeywordType = keywordType;
            Active = active;
            Number = number;
            Start = start;
            End = end;
            PlatformId = platformId;
            PlatformPartnerId = platformPartnerId;
            PlatformServiceType = platformServiceType;
            PlatformServiceId = platformServiceId;
            Shared = shared;
            NotifyStop = notifyStop;
            CustomParameters = customParameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier of the route, generated when
        /// created
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets id supplied by the client
        /// </summary>
        [JsonProperty(PropertyName = "refId")]
        public string RefId { get; set; }

        /// <summary>
        /// Gets or sets the type of route. Possible values include:
        /// 'KEYWORD_ROUTE', 'SUBNUMBER_ROUTE'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the keyword of the route (if the type is
        /// KEYWORD_ROUTE)
        /// </summary>
        [JsonProperty(PropertyName = "keyword")]
        public string Keyword { get; set; }

        /// <summary>
        /// Gets or sets defines the type of keyword matching (if the route
        /// type is KEYWORD_ROUTE). Possible values include: 'DEFAULT',
        /// 'EQUALS', 'FIRST_WORD', 'STARTS_WITH'
        /// </summary>
        [JsonProperty(PropertyName = "keywordType")]
        public string KeywordType { get; set; }

        /// <summary>
        /// Gets or sets indicates is the route is active
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets either a shortCode or a longnumber formatted as a
        /// MSISDN
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the time when the route should start to be active
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "start")]
        public System.DateTime? Start { get; set; }

        /// <summary>
        /// Gets or sets the time when the route should end to be active
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "end")]
        public System.DateTime? End { get; set; }

        /// <summary>
        /// Gets or sets the Platorm ID provided by LINK Mobility
        /// </summary>
        [JsonProperty(PropertyName = "platformId")]
        public string PlatformId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the Partner provided by LINK Mobility
        /// </summary>
        [JsonProperty(PropertyName = "platformPartnerId")]
        public string PlatformPartnerId { get; set; }

        /// <summary>
        /// Gets or sets ] The type of the platform service
        /// </summary>
        [JsonProperty(PropertyName = "platformServiceType")]
        public string PlatformServiceType { get; set; }

        /// <summary>
        /// Gets or sets ] The Id of the platform service
        /// </summary>
        [JsonProperty(PropertyName = "platformServiceId")]
        public string PlatformServiceId { get; set; }

        /// <summary>
        /// Gets or sets indicates if the keyword may be registered multiple
        /// times
        /// </summary>
        [JsonProperty(PropertyName = "shared")]
        public bool? Shared { get; set; }

        /// <summary>
        /// Gets or sets indicates that stop notifications should be forwarded
        /// for this keyword
        /// </summary>
        [JsonProperty(PropertyName = "notifyStop")]
        public bool NotifyStop { get; set; }

        /// <summary>
        /// Gets or sets  Additional parameters may be specified if needed
        /// </summary>
        [JsonProperty(PropertyName = "customParameters")]
        public object CustomParameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Number == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Number");
            }
            if (PlatformId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlatformId");
            }
            if (PlatformPartnerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlatformPartnerId");
            }
        }
    }
}
