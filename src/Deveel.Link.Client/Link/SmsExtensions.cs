// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Link
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Sms.
    /// </summary>
    public static partial class SmsExtensions
    {
            /// <summary>
            /// Submits a message object for delivery to a mobile phone
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static SmsSendResult Send(this ISms operations, SmsMessageRequest body = default(SmsMessageRequest))
            {
                return operations.SendAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a message object for delivery to a mobile phone
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SmsSendResult> SendAsync(this ISms operations, SmsMessageRequest body = default(SmsMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a message object for delivery to a mobile phone
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<SmsSendResult> SendWithHttpMessages(this ISms operations, SmsMessageRequest body = default(SmsMessageRequest), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a batch of SMS Messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<SmsSendResult> BatchSend(this ISms operations, SmsBatchSendRequest body = default(SmsBatchSendRequest))
            {
                return operations.BatchSendAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a batch of SMS Messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SmsSendResult>> BatchSendAsync(this ISms operations, SmsBatchSendRequest body = default(SmsBatchSendRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchSendWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a batch of SMS Messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<IList<SmsSendResult>> BatchSendWithHttpMessages(this ISms operations, SmsBatchSendRequest body = default(SmsBatchSendRequest), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.BatchSendWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
