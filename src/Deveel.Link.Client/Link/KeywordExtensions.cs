// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Link
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Keyword.
    /// </summary>
    public static partial class KeywordExtensions
    {
            /// <summary>
            /// Creates a new Keyword Route
            /// </summary>
            /// <remarks>
            /// Adds a keyword data to the storage by posting a keyword object
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='number'>
            /// The number that the keyword will be routed to
            /// </param>
            public static object Create(this IKeyword operations, Route body, string number)
            {
                return operations.CreateAsync(body, number).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Keyword Route
            /// </summary>
            /// <remarks>
            /// Adds a keyword data to the storage by posting a keyword object
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='number'>
            /// The number that the keyword will be routed to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAsync(this IKeyword operations, Route body, string number, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, number, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Keyword Route
            /// </summary>
            /// <remarks>
            /// Adds a keyword data to the storage by posting a keyword object
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='number'>
            /// The number that the keyword will be routed to
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object,KeywordCreateHeaders> CreateWithHttpMessages(this IKeyword operations, Route body, string number, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.CreateWithHttpMessagesAsync(body, number, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Keyword Route by ID
            /// </summary>
            /// <remarks>
            /// Retrieves a keyword route from a partner by its id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// The number that the keywords are routed to
            /// </param>
            /// <param name='platformId'>
            /// The ID of the Platform assigned by LINK Mobility
            /// </param>
            /// <param name='partnerId'>
            /// The ID of the Partner assigned by LINK Mobility
            /// </param>
            /// <param name='id'>
            /// The ID of the Route to be returned
            /// </param>
            public static object Get(this IKeyword operations, string number, string platformId, string partnerId, string id)
            {
                return operations.GetAsync(number, platformId, partnerId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Keyword Route by ID
            /// </summary>
            /// <remarks>
            /// Retrieves a keyword route from a partner by its id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// The number that the keywords are routed to
            /// </param>
            /// <param name='platformId'>
            /// The ID of the Platform assigned by LINK Mobility
            /// </param>
            /// <param name='partnerId'>
            /// The ID of the Partner assigned by LINK Mobility
            /// </param>
            /// <param name='id'>
            /// The ID of the Route to be returned
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IKeyword operations, string number, string platformId, string partnerId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(number, platformId, partnerId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Keyword Route by ID
            /// </summary>
            /// <remarks>
            /// Retrieves a keyword route from a partner by its id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// The number that the keywords are routed to
            /// </param>
            /// <param name='platformId'>
            /// The ID of the Platform assigned by LINK Mobility
            /// </param>
            /// <param name='partnerId'>
            /// The ID of the Partner assigned by LINK Mobility
            /// </param>
            /// <param name='id'>
            /// The ID of the Route to be returned
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetWithHttpMessages(this IKeyword operations, string number, string platformId, string partnerId, string id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetWithHttpMessagesAsync(number, platformId, partnerId, id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Keyword Route by a Reference ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// The number that the keywords are routed to
            /// </param>
            /// <param name='platformId'>
            /// The ID of the Platform assigned by LINK Mobility
            /// </param>
            /// <param name='partnerId'>
            /// The ID of the Partner assigned by LINK Mobility
            /// </param>
            /// <param name='refid'>
            /// </param>
            public static object GetByRefId(this IKeyword operations, string number, string platformId, string partnerId, string refid)
            {
                return operations.GetByRefIdAsync(number, platformId, partnerId, refid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Keyword Route by a Reference ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// The number that the keywords are routed to
            /// </param>
            /// <param name='platformId'>
            /// The ID of the Platform assigned by LINK Mobility
            /// </param>
            /// <param name='partnerId'>
            /// The ID of the Partner assigned by LINK Mobility
            /// </param>
            /// <param name='refid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByRefIdAsync(this IKeyword operations, string number, string platformId, string partnerId, string refid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByRefIdWithHttpMessagesAsync(number, platformId, partnerId, refid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Keyword Route by a Reference ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// The number that the keywords are routed to
            /// </param>
            /// <param name='platformId'>
            /// The ID of the Platform assigned by LINK Mobility
            /// </param>
            /// <param name='partnerId'>
            /// The ID of the Partner assigned by LINK Mobility
            /// </param>
            /// <param name='refid'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetByRefIdWithHttpMessages(this IKeyword operations, string number, string platformId, string partnerId, string refid, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetByRefIdWithHttpMessagesAsync(number, platformId, partnerId, refid, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
